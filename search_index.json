[
["index.html", "Introduction à la programmation scientifique Syllabus Description général Objectifs spécifiques Pré-requis Approche pédagogique Matériel recommandé Lectures recommandées Calendrier Coordonnées", " Introduction à la programmation scientifique Par Dominique Gravel, Steve Vissault &amp; Kevin Cazelles Hiver 2017 Syllabus Description général Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Objectifs spécifiques Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Pré-requis Lorem ipsum dolor sit amet Ut enim ad minim Duis aute irure dolor Approche pédagogique Matériel recommandé Logiciel R Éditeurs de texte: Context, Textpad, Textedit, gedit Environnements de développement (IDEs): RStudio SublimeText Textwrangler aquamacs eclipse RCommander TinnR Atom vim Lectures recommandées CSBQ Software Carpentry Document Emmanuel Paradis Document Tim Poisot …. bouquins sur la programmation sur R lien vers le site du labo Calendrier Date des cours Date des remises Date de l’évaluation finale Coordonnées Dominique Gravel Steve Vissault Bureau D8-### D8-0012 Téléphone (819) 821-8000 Poste 66589 (819) 821-7000 Poste 62591 Courriel dominique.gravel@usherbrooke.ca steve.vissault@usherbrooke.ca "],
["intro.html", "Cours 1 Introduction 1.1 Introduction à la programmation scientifique (60 min) 1.2 Pseudo-code (60 min) 1.3 Bonnes pratiques (60 min) 1.4 Exercice", " Cours 1 Introduction 1.1 Introduction à la programmation scientifique (60 min) histoire des langages de programmation progression de la puissance de calcul utilisation en science tâches répétitives et tâches complexes visualisation des données exploration analyse statistique nettoyage des données simulations stochastiques avantages de la programmation scientifique gain de temps: tâches répétitives limiter les erreurs formaliser les opérations archiver et reproduire (traçabilité) tâches intensives (e.g. en génomique) inconvénients: courbe d’apprentissage ce qu’un ordinateur ne peut pas faire types de langages compilé interprété 1.2 Pseudo-code (60 min) exercice: ordonner les lettres concepts de base en programmation logique &amp; décisions boucles fonctions règles représentation schématique du pseudo-code représentation par liste exercice: schématiser le pseudo-code pour le tri des lettres 1.3 Bonnes pratiques (60 min) commenter / communication être propre / gestion de la mémoire et des objets contrôle de version découper le script coder en fonctions optimisation des opérations gestion des nombres aléatoires reproductibilité programmer défensivement entête des scripts tests bien nommer ses variables (court, explicite, éviter les conflits, noms de variables utilisées par l’environnement R) ne pas écraser ses variables 1.4 Exercice À déterminer. "],
["le-language-r.html", "Cours 2 Le language R 2.1 Interagir avec R (60 min) 2.2 Manipulation des objets (90 min) 2.3 Exercice", " Cours 2 Le language R 2.1 Interagir avec R (60 min) 2.1.1 Quelques repères historiques KC: je pense qu’en faisant le bilan actuel ça donnera le pourquoi de R. (Historique de R; Pourquoi R) Ouvrir l’interface visuel (console) Environnement de développement: RStudio, SublimeText, Textwrangler, Emac, Atom Répertoire de travail (~, ., chemin de fichier, getwd(), setwd()) getwd() setwd() Type de variables Types d’objet Lire des fichiers formats utilisés et à éviter EX: passer d’un fichier Excel à R erreurs courantes noms de fichier et le répertoire de travail type de séparateur nom des colonnes les entrées vides Écrire des fichiers formats EX: passer d’un objet R à Excel Visualiser les objets ls, str, head, tail, summary Le script commenter découper la fonction ‘source’ Démystifier la fonction Aide Charger une librairie notion de contrôle de version: GIT EXERCICE : modifier un fichier excel, le lire, le modifier et l’ouvrir à nouveau sur Excel 2.2 Manipulation des objets (90 min) générer des objets (seq, c, matrix, vector, rep, expand.grid) indexation vecteur matrice liste manipulations sur data frame noms de colonnes et de rangées conversion entre types d’objets combiner des objets split merge subset sort order rank unique indexer des ensembles tableau croisé 2.3 Exercice Description: Compiler les données de Sutton, un tableau de nombre de tiges et de taille moyenne par espèce, au sein de trois blocs "],
["les-fonctions-et-operateurs.html", "Cours 3 Les fonctions et opérateurs 3.1 Opérations mathématiques (30 min) 3.2 Fonctions 3.3 Exercice", " Cours 3 Les fonctions et opérateurs KC: Faudrait en données une définitopn pour commencer 3.1 Opérations mathématiques (30 min) opérations de base (addition, multiplication, division) somme produit modulo rowSums, colSums log, exponentiel produit de matrices et vecteurs produit scalaire d’objets de tailles différentes produit matriciel générer des nombres aléatoires 3.2 Fonctions généralités répétition capacité de généraliser une opération mettre en forme une série d’opérations (pseudo-code) formaliser l’entrée et la sortie d’une opération appel d’une fonction déclaration d’une fonction synthaxe de base arguments facultatifs arguments par défaut retour d’arguments portée local vs global enrichi: allocation de mémoire dans d’autres langages 3.3 Exercice Description: programmer une fonction qui permet de calculer des statistiques descriptives pour chaque quadrat du jeux de données min et max taille moyenne variance de la taille nombre de tiges nombre d’espèces espèce la plus abondante espèce la plus rare "],
["algorithmique-i.html", "Cours 4 Algorithmique I 4.1 Les itérateurs 4.2 Les opérateurs logiques", " Cours 4 Algorithmique I 4.1 Les itérateurs for loop break while apply, rapply, lapply impression à l’écran (cat, print) manipuler les compteurs conflits entre compteurs EXERCICE: modèle de croissance logistique 4.2 Les opérateurs logiques Principe: coder un arbre de décision opérateurs de base: ==, ­&lt;=, &gt;=, !=, |, &amp; if, else opération sur des vecteurs opérateurs avancés: %in% which match 4.2.1 Exercice Description fonction qui trie des lettres automatiquement "],
["algorithmique-ii.html", "Cours 5 Algorithmique II 5.1 Simulations stochastiques 5.2 Optimisation des scripts", " Cours 5 Algorithmique II 5.1 Simulations stochastiques principales distributions de nombres aléatoires (runif, rnorm, rexp, rgamma) principe de prise de décision: binomial principe de prise de décision: multinomial 5.1.1 Exercice Description: conduite aléatoire dans un cartier résidentiel (tourne à gauche ou droite avec une pièce de monnaie) 5.2 Optimisation des scripts Calculer le temps écouler pour réaliser une fonction Les pertes de temps les plus communes Façons de gagner de l’efficacité Calcul parallèle 5.2.1 Exercice Description: optimisation du script de tri des lettres "],
["references.html", "References", " References "]
]
